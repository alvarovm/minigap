Logging all output starting now into /home/sstafford/Documents/Python/miniGAP/minigap/results/Graphene_12_06_2021/miniGAP.log
Input settings for this calculation stored in /home/sstafford/Documents/Python/miniGAP/minigap/results/Graphene_12_06_2021/miniGAP.settings
Stack size set to unlimited
1 GPU(s) recognized by tensorflow: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]
Imported 600 structures from /home/sstafford/Documents/Python/miniGAP/minigap/data/ManyGraphenes_unzipped.db. Structures were taken uniformly from throughout dataset which contains 10000 total structures.
Compiling structures into list took 4.37 seconds
Generating animation frame 0 (0% complete)
Generating animation frame 10 (10% complete)
Generating animation frame 20 (20% complete)
Generating animation frame 30 (30% complete)
Generating animation frame 40 (40% complete)
Generating animation frame 50 (50% complete)
Generating animation frame 60 (60% complete)
Generating animation frame 70 (70% complete)
Generating animation frame 80 (80% complete)
Generating animation frame 90 (90% complete)
Generating animation frame 100 (100% complete)
Filename '/home/sstafford/Documents/Python/miniGAP/minigap/results/Graphene_12_06_2021/structure_animation.mp4' selected.
Generating animation frame 0 (0% complete)
Generating animation frame 10 (10% complete)
Generating animation frame 20 (20% complete)
Generating animation frame 30 (30% complete)
Generating animation frame 40 (40% complete)
Generating animation frame 50 (50% complete)
Generating animation frame 60 (60% complete)
Generating animation frame 70 (70% complete)
Generating animation frame 80 (80% complete)
Generating animation frame 90 (90% complete)
Generating animation frame 100 (100% complete)
Created animation of the structural dataset used in this calculation in the results directory. This might be useful to verify the correct structures are being used.
Created animation of structures in 39.68380784988403 seconds 
Gathered energy and structure info in 12.10 seconds
Completed the initial setup of miniGAP (including compiling structural data) in 58.47 seconds
Generated SOAP descriptors in 4.05 seconds
Reformatted data to build model in 0.09 seconds.
Not using any sparsity.
Using a degree 2 polynomial kernel.
Alert: Double check the training validity for degree =/= 1 when not using predict_f
Training using 54432 atoms total using 6 batches with 9072 atoms per batch.
Epoch 0
TRACING train_hyperparams_without_forces
TRACING train_hyperparams_without_forces
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9256927261750416 + 0 = 0.9256927261750416 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.921396134719956 + 0.9256927261750416 = 1.8470888608949976 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.926328807049067 + 1.8470888608949976 = 2.7734176679440647 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9293071772901538 + 2.7734176679440647 = 3.7027248452342185 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9269988595810104 + 3.7027248452342185 = 4.629723704815229 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9264139433223053 + 4.629723704815229 = 5.556137648137534 
Epoch 0,  mse = 0.9260229413562557
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.920340241780965 + 0 = 0.920340241780965 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9238942266331797 + 0.920340241780965 = 1.8442344684141445 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9247399166091435 + 1.8442344684141445 = 2.768974385023288 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9292182887533207 + 2.768974385023288 = 3.6981926737766084 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9213559534849302 + 3.6981926737766084 = 4.619548627261539 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.923496955698056 + 4.619548627261539 = 5.543045582959595 
Epoch 1,  mse = 0.9238409304932658
Epoch 2
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9238385267085153 + 0 = 0.9238385267085153 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9276524516298813 + 0.9238385267085153 = 1.8514909783383966 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9252647741064502 + 1.8514909783383966 = 2.776755752444847 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9268191107993479 + 2.776755752444847 = 3.703574863244195 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9225106603636024 + 3.703574863244195 = 4.626085523607797 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9232604814760987 + 4.626085523607797 = 5.549346005083896 
Epoch 2,  mse = 0.924891000847316
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9245070506091432 + 0 = 0.9245070506091432 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9291060222501282 + 0.9245070506091432 = 1.8536130728592712 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9278208222649588 + 1.8536130728592712 = 2.78143389512423 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9232285318437283 + 2.78143389512423 = 3.7046624269679587 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9231727928439147 + 3.7046624269679587 = 4.627835219811874 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9203585837161369 + 4.627835219811874 = 5.548193803528011 
Epoch 3,  mse = 0.9246989672546685
Epoch 4
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9216006168342763 + 0 = 0.9216006168342763 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9245772932800014 + 0.9216006168342763 = 1.8461779101142777 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9251474914062912 + 1.8461779101142777 = 2.771325401520569 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9204953701734367 + 2.771325401520569 = 3.6918207716940055 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9280781288467177 + 3.6918207716940055 = 4.619898900540723 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.924861807134563 + 4.619898900540723 = 5.544760707675286 
Epoch 4,  mse = 0.9241267846125476
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9287817454627931 + 0 = 0.9287817454627931 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9191537721912456 + 0.9287817454627931 = 1.8479355176540389 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9176973846891544 + 1.8479355176540389 = 2.765632902343193 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9236541545645046 + 2.765632902343193 = 3.689287056907698 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9289585547503915 + 3.689287056907698 = 4.6182456116580894 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9269839310259345 + 4.6182456116580894 = 5.545229542684024 
Epoch 5,  mse = 0.9242049237806707
Epoch 6
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9269319063610786 + 0 = 0.9269319063610786 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9214940427661825 + 0.9269319063610786 = 1.848425949127261 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9180071366028616 + 1.848425949127261 = 2.7664330857301227 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9232398893242082 + 2.7664330857301227 = 3.689672975054331 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9290980965140501 + 3.689672975054331 = 4.618771071568381 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9231702327090339 + 4.618771071568381 = 5.541941304277415 
Epoch 6,  mse = 0.9236568840462359
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9282963062984226 + 0 = 0.9282963062984226 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9186976222191612 + 0.9282963062984226 = 1.8469939285175838 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.925799091175495 + 1.8469939285175838 = 2.772793019693079 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9249376242704077 + 2.772793019693079 = 3.6977306439634865 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9261044299079192 + 3.6977306439634865 = 4.623835073871406 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9262693659024832 + 4.623835073871406 = 5.550104439773889 
Epoch 7,  mse = 0.9250174066289815
Epoch 8
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9231003119910502 + 0 = 0.9231003119910502 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.922696521669921 + 0.9231003119910502 = 1.8457968336609714 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9235084932519004 + 1.8457968336609714 = 2.769305326912872 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9250573206422444 + 2.769305326912872 = 3.6943626475551166 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9276633020552653 + 3.6943626475551166 = 4.622025949610382 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9247687376416235 + 4.622025949610382 = 5.546794687252006 
Epoch 8,  mse = 0.9244657812086676
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9207045915311278 + 0 = 0.9207045915311278 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9241675042042128 + 0.9207045915311278 = 1.8448720957353406 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9220668551142367 + 1.8448720957353406 = 2.7669389508495774 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9254794947065674 + 2.7669389508495774 = 3.692418445556145 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9260454844998353 + 3.692418445556145 = 4.61846393005598 
valid_ens[:3] = [ 0.98367669 -1.83176599 -1.01076341]
Adding mse_ens_j_i to mse_ens_j: 0.9242312889420016 + 4.61846393005598 = 5.542695218997982 
Epoch 9,  mse = 0.9237825364996636
Calculating weights
+-------------------------+-----------+------------------+---------+-------------+---------+---------+--------------+
| name                    | class     | transform        | prior   | trainable   | shape   | dtype   |        value |
+=========================+===========+==================+=========+=============+=========+=========+==============+
| GPR.kernel.variance     | Parameter | Softplus         |         | True        | ()      | float64 | 1.42424      |
+-------------------------+-----------+------------------+---------+-------------+---------+---------+--------------+
| GPR.kernel.degree       | Parameter | Identity         |         | False       | ()      | float64 | 2            |
+-------------------------+-----------+------------------+---------+-------------+---------+---------+--------------+
| GPR.kernel.offset       | Parameter | Softplus         |         | False       | ()      | float64 | 2.22507e-308 |
+-------------------------+-----------+------------------+---------+-------------+---------+---------+--------------+
| GPR.likelihood.variance | Parameter | Softplus + Shift |         | True        | ()      | float64 | 5.44084e-05  |
+-------------------------+-----------+------------------+---------+-------------+---------+---------+--------------+
Predicting final energies
Traceback (most recent call last):
  File "/home/sstafford/Documents/Python/miniGAP/minigap/code/miniGAP_from_notebook_12_06_2021.py", line 1053, in <module>
    predict_ens, predict_ens_var = gpr_model.predict_f(test_sps)
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/models/gpr.py", line 163, in predict_f
    return self.posterior(posteriors.PrecomputeCacheType.NOCACHE).fused_predict_f(
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/posteriors.py", line 144, in fused_predict_f
    mean, cov = self._conditional_fused(
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/posteriors.py", line 284, in _conditional_fused
    Kmm = self.kernel(self.X_data)
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/kernels/base.py", line 173, in __call__
    return self.K(X, X2)
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/kernels/linears.py", line 87, in K
    return (super().K(X, X2) + self.offset) ** self.degree
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/gpflow/kernels/linears.py", line 52, in K
    return tf.matmul(X * self.variance, X, transpose_b=True)
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py", line 153, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/home/sstafford/anaconda3/envs/minigap/lib/python3.9/site-packages/tensorflow/python/framework/ops.py", line 7107, in raise_from_not_ok_status
    raise core._status_to_exception(e) from None  # pylint: disable=protected-access
tensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[60480,60480] and type double on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc [Op:MatMul]
